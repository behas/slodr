package eu.europeana.lod.data;

import java.io.IOException;
import java.io.OutputStreamWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.RDFWriter;
import com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

import eu.europeana.lod.data.EuropeanaRequest.MimeTypePattern;

/**
 * 
 * This servlet handles all RDF IR requests and is responsible for returning RDF
 * data.s
 * 
 * @author haslhofer
 * @author cesareconcordia
 * 
 */
public class DataServlet extends HttpServlet {

	private static String SPARQL_ENDPOINT = "http://data.mminf.univie.ac.at/sparql";

	public void init() {

	}

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {

		// Wrap request
		EuropeanaRequest request = new EuropeanaRequest(req);

		// Retrieve the non-information resource URI
		String nirURI = request.getNonInformationResourceURI();

		// Retrieve the model
		Model model = retrieveModel(nirURI);

		if (!model.isEmpty()) {

			resp.addHeader("Vary", "Accept");

			String requestedMimeType = request.getPreferredAcceptMimeType();

			resp.setContentType(requestedMimeType + "; charset=UTF-8");

			getWriter(requestedMimeType).write(model, resp);

			resp.getOutputStream().flush();

		} else {

			resp.sendError(HttpServletResponse.SC_NOT_FOUND);
		}

	}

	/**
	 * Fetches the model from a remote SPARQL endpoint
	 * 
	 * @param resourceURI
	 * @return
	 */
	private Model retrieveModel(String resourceURI) {

		String query = "DESCRIBE <" + resourceURI + ">";

		QueryEngineHTTP endpoint = new QueryEngineHTTP(SPARQL_ENDPOINT, query);

		Model result = endpoint.execDescribe();

		return result;
	}

	/*
	 * The following code parts are taken from pubby
	 * 
	 * https://github.com/cygri/pubby/
	 */

	private ModelWriter getWriter(String mediaType) {

		if (MimeTypePattern.matchMIMEType(mediaType, MimeTypePattern.RDF))
			return new RDFXMLWriter();
		if (MimeTypePattern.matchMIMEType(mediaType, MimeTypePattern.TTL))
			return new TurtleWriter();
		if (MimeTypePattern.matchMIMEType(mediaType, MimeTypePattern.N3))
			return new NTriplesWriter();

		return new NTriplesWriter();
	}

	private interface ModelWriter {
		void write(Model model, HttpServletResponse response)
				throws IOException;
	}

	private class NTriplesWriter implements ModelWriter {
		public void write(Model model, HttpServletResponse response)
				throws IOException {
			model.getWriter("N-TRIPLES").write(model,
					response.getOutputStream(), null);
		}
	}

	private class TurtleWriter implements ModelWriter {
		public void write(Model model, HttpServletResponse response)
				throws IOException {
			model.getWriter("TURTLE").write(model, response.getOutputStream(),
					null);
		}
	}

	private class RDFXMLWriter implements ModelWriter {
		public void write(Model model, HttpServletResponse response)
				throws IOException {
			RDFWriter writer = model.getWriter("RDF/XML-ABBREV");
			writer.setProperty("showXmlDeclaration", "true");
			writer.setProperty("blockRules", "propertyAttr");
			writer.write(
					model,
					new OutputStreamWriter(response.getOutputStream(), "utf-8"),
					null);
		}
	}

	/**
	 * autogenerated serial id
	 */
	private static final long serialVersionUID = -4443987723427113923L;

}
