package eu.europeana.lod.data;

import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Random;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.RDFWriter;
import com.hp.hpl.jena.sparql.engine.http.QueryEngineHTTP;

/**
 * 
 * This servlet handles all RDF IR requests and is responsible for returning RDF data.s
 * 
 * @author haslhofer
 *
 */
public class DataServlet extends HttpServlet {

	// TODO: handle externally in web.xml
	public static final String[] SPARQL_ENDPOINTS = {
			//"http://sparql.mminf.univie.ac.at",
			"http://data.mminf.univie.ac.at/sparql" };
	
	
	public void init() {

	}

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		
		// Wrap request
		EuropeanaRequest request = new EuropeanaRequest(req);
		
		// Retrieve the non-information resource URI
		String nirURI = request.getNonInformationResourceURI();
		
		Model model = retrieveModel(nirURI);
		
		if (! model.isEmpty()) {
			
			resp.addHeader("Vary", "Accept");
			
			resp.setContentType(request.getHeader("accept") + "; charset=UTF-8");
			getWriter(request.getHeader("accept").toLowerCase()).write(model, resp);
			resp.getOutputStream().flush();
			
			
		} else {
			
			resp.sendError(HttpServletResponse.SC_NOT_FOUND);
		}

		
		
	}

	
	/**
	 * Fetches the model from a remote SPARQL endpoint
	 * 
	 * @param resourceURI
	 * @return
	 */
	private Model retrieveModel(String resourceURI) {
		
		String query = "DESCRIBE <" + resourceURI + ">";
		
		//TODO: improve SPARQL load balancing
		Random rand = new Random();
		
		String sparqlEndpoint = SPARQL_ENDPOINTS[rand.nextInt(SPARQL_ENDPOINTS.length)]; 

		System.out.println("Executing " + query + " at " + sparqlEndpoint);
		
		
		QueryEngineHTTP endpoint = new QueryEngineHTTP(sparqlEndpoint, query);
		
		Model result = endpoint.execDescribe();
		
		result.write(System.out, "RDF/XML");
		
		
		return result;
	}

	
	
	// taken from Pubby
	
	private ModelWriter getWriter(String mediaType) {
		//if ("application/rdf+xml".equals(mediaType)) {
		//	return new RDFXMLWriter();
		//}
		if (mediaType.indexOf("rdf+xml")>0) {
			return new RDFXMLWriter();
		}
		/*if ("application/x-turtle".equals(mediaType)) {
			return new TurtleWriter();
		}
		if ("text/rdf+n3;charset=utf-8".equals(mediaType)) {
			return new TurtleWriter();
		}*/
		
		if (mediaType.indexOf("x-turtle")>0) {
			return new TurtleWriter();
		}
		if (mediaType.indexOf("rdf+n3")>0) {
			return new TurtleWriter();
		}
		return new NTriplesWriter();
	}
	
	private interface ModelWriter {
		void write(Model model, HttpServletResponse response) throws IOException;
	}
	
	private class NTriplesWriter implements ModelWriter {
		public void write(Model model, HttpServletResponse response) throws IOException {
			model.getWriter("N-TRIPLES").write(model, response.getOutputStream(), null);
		}
	}
	
	private class TurtleWriter implements ModelWriter {
		public void write(Model model, HttpServletResponse response) throws IOException {
			model.getWriter("TURTLE").write(model, response.getOutputStream(), null);
		}
	}

	private class RDFXMLWriter implements ModelWriter {
		public void write(Model model, HttpServletResponse response) throws IOException {
			RDFWriter writer = model.getWriter("RDF/XML-ABBREV");
			writer.setProperty("showXmlDeclaration", "true");
			writer.setProperty("blockRules", "propertyAttr");
			writer.write(model, 
					new OutputStreamWriter(response.getOutputStream(), "utf-8"), null);
		}
	}
	
	
	/**
	 * autogenerated serial id 
	 */
	private static final long serialVersionUID = -4443987723427113923L;

	
	
}
